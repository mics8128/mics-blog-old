{"pages":[{"url":"https://mics.tw/posts/2017/03/just-update/","text":"好久沒更新 Blog 了 來刷刷存在感 (?) 最近買了新筆電，正在等待新筆電送到，原本是使用 Macbook pro 當作開發環境的，但最近覺得 13 寸的 Macbook pro 效能不敷使用，上網的時候常常頓頓的，因此購入了新筆電， 新筆電作業系統是 Win 10 可能會試用看看， Win 10 提供的 Ubuntu base 來建立 Laravel 開發環境。 久違的 Laravel 開發教學可能會轉成 Win 10 底下為主，不過這些差異也只有初始環境設定上有差，實際在寫後面的部分應該是差不多的，有需要其他環境的教學我有計劃再補上。","tags":"Post","title":"刷個存在感"},{"url":"https://mics.tw/posts/2015/12/laravel-installer-basic/","text":"在這邊介紹使用 laravel installer 來初始化 laravel 專案，並使用 php 附帶的 http server 執行測試伺服器。 $ composer global require laravel/installer 此指令的 global 意思是安裝在家目錄下，通常使用 global 的時候是安裝一些指令列工具，這一行的作用是安裝 laravel installer。 Laravel installer 的好處是創新專案的時候比較快一點，因為正常使用 composer 時，他會去處理相依性問題，會分別下載所有的相依套件。使用此程式則有一個伺服器負責天天處理好相依性問題並打包成單一壓縮檔案。在執行安裝時直接下載該檔案來解壓縮，會比分別下載快很多。 安裝完成後執行 laravel --version 確定是否安裝正確 $ laravel --version Laravel Installer version 1 .2.2 在這邊僅測試過 MAC 環境，請 Windows 環境使用者測試看看。 假如無法找到 laravel 指令在這邊回報一下，我之後能測試 Windows 環境的時候會加上作法。 接下來就可以使用 laravel installer 創建新專案，在指令列執行 laravel new laravel-new-project ，最後面的 laravel-new-project 是專案名稱，可以隨意更改。 (提示說找不到laravel指令的可以先用 composer 直接創建專案 composer create-project laravel/laravel laravel-new-project ) $ laravel new laravel-new-project Crafting application... > php -r \"copy('.env.example', '.env');\" > php artisan clear-compiled > php artisan optimize Generating optimized class loader > php artisan key:generate Application key [ myD1M6xsWMjkdMYBampWwW7EBwogtzxN ] set successfully. Application ready! Build something amazing. 就會在當下目錄看到一個laravel-new-project的資料夾，讓我們進去裡面並且看看有什麼檔案 $ cd laravel-new-project 在這邊先只介紹幾個重要檔案，其他的部分會在後續慢慢瞭解。 app - 最重要的部分，你即將寫程式的檔案位置。 artisan - laravel的命令列工具，下面即將會用到這個工具建立簡易的伺服器來測試我們的第一個laravel app composer.json - composer篇已經說過的，套件相依的檔案 composer.lock - composer篇已經說過的，套件相依的檔案 public - 靜態檔案請放在這邊( css, js ..等等 ) vendor - composer篇已經介紹過，第三方套件的放置處 接下來執行 php artisan serve $ php artisan serve Laravel development server started on http://localhost:8000/ 然後連到 http://localhost:8000/ 就會看到 Laravel 5 在畫面中央，恭喜你成功創建了一個什麼功能都沒有的 Laravel App。 最後後回到指令列 Ctrl + C 結束測試伺服器","tags":"Post","title":"Laravel Installer 安裝與使用"},{"url":"https://mics.tw/posts/2015/12/composer-basic-use-part-1/","text":"Composer 是 PHP 的一個依賴管理工具。它允許你簡單申明項目所依賴的程式庫，就可以幫你在專案中自動的安裝他們。 前置作業 請先安裝php以及composer， 這篇文章 的環境建立部分有安裝方法。 實作開始 首先建立專案資料夾並開啟命令列 ( Mac 下的 Termial , Windows 下的 Power Shell ) 再來執行以下指令 並根據提示回答適當的答案 $ composer init Package name ( <vendor>/<name> ) [ mics/t1 ] : mics8128/test1 # mics8128請改為你的 Github 名稱，如果沒有，去註冊一個。 # test1為專案名稱，可以照這邊填寫test2 Description [] : # 專案說明 在這邊空白即可 Author [ Mics <mics.mm@gmail.com> ] : # 作者 空白或填上自己暱稱/姓名 都可以 Minimum Stability [] : Package Type [] : License [] : # 以上三個空白即可，在這邊不重要 Would you like to define your dependencies ( require ) interactively [ yes ] ? no Would you like to define your dev dependencies ( require-dev ) interactively [ yes ] ? no # 這兩個先空白，稍後手動新增 Do you confirm generation [ yes ] ? # 在這之前會有一大串，就是即將生成的 composer.json 檔案內容，在這邊直接按 Enter ，同意生成設定檔。 可以看到專案的跟目錄下有一個檔案 composer.json，我的 composer.json 長得像這樣。 { \"name\" : \"mics8128/test1\" , \"authors\" : [ { \"name\" : \"Mics\" , \"email\" : \"mics.mm@gmail.com\" } ], \"require\" : {} } 在這邊修改require那一行 { \"name\" : \"mics8128/test1\" , \"authors\" : [ { \"name\" : \"Mics\" , \"email\" : \"mics.mm@gmail.com\" } ], \"require\" : { \"monolog/monolog\" : \"&#94;1.17\" } } 然後執行以下指令驗證 composer.json 有沒有錯誤 $ composer validate 你會看到他提示你沒有 license ，在這邊先忽視，反正這個專案沒有要發布 接下來執行 composer install $ composer install Loading composer repositories with package information Installing dependencies ( including require-dev ) - Installing psr/log ( 1 .0.0 ) Loading from cache - Installing monolog/monolog ( 1 .17.2 ) Loading from cache ... # 這邊一大串是建議安裝套件，我們這邊並不需要 Writing lock file Generating autoload files composer install 這動作 會先檢查有沒有composer.lock，如果沒有就會根據composer.json裡面的版本敘述來安裝相關套件。 像是我們要求安裝monolog/monolog，但是他卻多安裝了一個psr/log，這就是因為monolog/monolog需要psr/log，他就會自動找相關的相依套件去下載。 然後現在已經把monolog安裝完成了，如何使用呢？ Composer提供一個自動載入器，只需要在專案內加上一行 require __DIR__ . '/vendor/autoload.php' 即可 在專案目錄下建立一個檔案叫做 test.php 放入以下內容 <?php require __DIR__ . '/vendor/autoload.php' ; $log = new Monolog\\Logger ( 'name' ); $log -> pushHandler ( new Monolog\\Handler\\StreamHandler ( 'app.log' , Monolog\\Logger :: WARNING )); $log -> addWarning ( 'Foo' ); //end of test.php 然後執行 php test.php 會看到兩行警告，那是關於時區的東西，在這裡可以忽視。 接下來你會看到專案目錄下多出了一個app.log就是剛剛程式碼所新增的東西 (也就是Monolog所提供的功能) 打開該檔案會看到 [2015-12-05 20:09:41] name.WARNING: Foo [] [] 想一想 or 找一找 這是載入其他人開發的第三方程式庫，那自己開發的呢？ 這裡只有安裝，萬一以後我想升級套件怎麼辦？","tags":"Post","title":"Composer基本用法 Part I"},{"url":"https://mics.tw/posts/2015/12/develop-laravel-training-plan/","text":"最近有不少學徒加入了，在這邊針對學徒建立一個laravel開發入門指南。 前言 其實我自己是比較偏好 Python 居多，曾經想以 Django 來當作主力開發的 Framework ，但是身邊的開發者都是接觸 PHP 居多，所以最後選擇了一個最近非常熱門的 Framework -- Laravel 來當作主力開發的框架，為此而撰寫的一整系列教學文，文中有任何錯誤或是不懂的地方，歡迎在留言中提出，如果沒有超連結，代表文章還尚未撰寫完成，敬請期待。 本篇文章會持續修改，最新修改日期: 2015-12-06。 第一章 環境建立 Windows 使用官方php安裝php與composer 使用scoop安裝php與composer (建議選擇此項，後續需要其它套件皆會使用scoop安裝) 假如覺得以上步驟太麻煩，想要搶先體驗laravel開發可以試試wagon這個超級開發懶人包。 Wagon 影片: wagon：免安裝可攜式的 Laravel 開發懶人包 by 聖佑 Mac 安裝php與composer Linux 安裝php與composer 第二章 Composer Composer基本用法 Part I Composer基本用法 Part II 第三章 homestead 尚未規劃 第四章 Laravel Laravel Installer 的安裝與使用 使用 Laravel 製作一個簡易 Blog (預計分成三部分) 第五章 如何團隊合作 PHP 語法標準 Git 使用教學","tags":"Post","title":"開發Laravel的教學計畫"},{"url":"https://mics.tw/posts/2015/12/upgrade-windows7-powershell-to-new-version-by-chocolatey/","text":"因為安裝 scoop 需要 PowerShell 3.0 以上版本, 但是 Windows 7 內建的 PowerShell 的版本號是 2.0，安裝時會遇到一些問題，在這邊附上使用 chocolatey 在 windows 7 上安裝 Powershell 4.0 的方法 假如你已經是 windows 8 或以上 powershell 版本應該已經足夠安裝 scoop 了, 但是 chocolatey 是一套套件管理程式 也可以用來安裝軟體(ex. FileZilla, Notepad++, virtualBox 等)，更多詳細資料可以參考 官方網站 ，在這邊開始教學。 首先以 系統管理員 模式開啟cmd.exe 然後執行以下指令 @ powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH =% PATH % ; % ALLUSERSPROFILE % \\ chocolatey \\ bin 此指令的作用是安裝choco這個套件管理系統 我在測試時會看到一些警告訊息, 但是不影響使用, 所以可以繼續以下步驟. 接下來關閉 cmd.exe 然後以 系統管理員 模式打開 powershell (不要開錯了喔, 是 powershell 不是 cmd.exe ) 然後執行以下指令 choco install powershell -y 此指令會幫你完成安裝 powershell 所需要做的動作 但是因為 powershell 是 windows 系統元件所以務必要重新開機 接下來務必要記得需要 重開機 不要忘記 重開機 記得 要重開機 重開機之後 重開機之後 重開機之後 很重要所以寫三遍 接下來確認 powershell 是否成功的更新了 確認方法: 打開 powershell (不需要管理權限)後執行 $PSVersionTable.PSVersion 最後會看到以下訊息就是正確升級了 Major Minor Build Revision ----- ----- ----- -------- 4 0 -1 -1","tags":"Post","title":"使用chocolatey升級Windows7下的Powershell到最新版本"},{"url":"https://mics.tw/posts/2015/11/install-composer-with-scoop-at-windows/","text":"因為我周邊的開發者都使用Windows，因此特意寫了這篇文章，給我周邊的開發者練習使用在windows下的文字介面。 確定是否有PowerShell 3.0 假如你的作業系統是 Windows 7 請先參考 這篇文章 來升級powershell。 開始安裝 Scoop 請先打開 powershell 執行 set-executionpolicy unrestricted -s cu 然後按Y後按 Enter 接下來先安裝 scoop 然後安裝 php iex (new-object net.webclient).downloadstring('https://get.scoop.sh') scoop install php 靜待安裝完畢 測試 php 是否正常執行 到 C:\\Users\\YOUR USER NAME\\AppData\\Local\\scoop 三個資料夾的功能分別是 apps - 存放 scoop 安裝的程式的資料 cache - 安裝檔案暫存 shims - 執行檔案(安裝的時候已經加入PATH中) 再來進到 .\\apps\\php\\5.6.15 中( 注意 版本號可能會不同)，找到 php.ini 搜尋 ; extension_dir = \"ext\" 改成 (注意 YOUR USER NAME 和版本號 5.6.15 可能會不同，請自行隨機應變) extension_dir = \"C:\\Users\\YOUR USER NAME\\AppData\\Local\\scoop\\apps\\php\\5.6.15\\ext\" 再找到 ;extension=php_openssl.dll 把前面的分號 ; 去掉 然後存檔 進入執行檔目錄(composer直接安裝在這裡) cd \\Users\\YOUR USER NAME\\AppData\\Local\\scoop\\shims 安裝composer並設定執行script php -r \"readfile('https://getcomposer.org/installer');\" | php wget https :// gist . githubusercontent . com / mics8128 / de1ea57536a56aa48673 / raw / 268f1c15091a728ef2e051a81a5980c4531d89af / composer . bat -OutFile composer . bat 最後測試我們的 composer 有沒有正常 composer.bat 大功告成拉~ YA 以下是選用安裝的軟體 都只要一個指令喔&#94;.< Git版本管理系統，在 powershell 執行 scoop install git (暫時想不到其他的 隨時補充)","tags":"Post","title":"在Windows中使用Scoop安裝php與Composer"},{"url":"https://mics.tw/posts/2015/10/windows-linux-like-face/","text":"紀錄一下在windows下使用zsh的方法(給自己看的，不會太詳細XD) Babun 到 Babun 下載後解壓縮到任一地方 執行install.bat 坐享其成~ 接下來就完成了在windows下的command line環境 :DDDDD 下面是一些我自己的設定 可作可不做 到 C:\\User\\UserName\\.babun\\fonts\\Menlo 裡找到四個字形檔，右鍵->安裝 然後執行 RegisterFont.exe 然後到終端機更改字體為Menlo for Powerline 最後打開.zshrc找到 ZSH_THEME=\"babun\" 改成 ZSH_THEME=\"agnoster\" 最後在最後一行加上 DEFAULT_USER=\"UserName\"","tags":"Post","title":"Windows下的Linux like介面懶人包 - Babun"},{"url":"https://mics.tw/posts/2015/10/my-mac-software/","text":"此文章記錄一些在我自己的MacBook Pro上執行的好Apps，使用的版本是OS X EI Capitan。 Apps The Unarchiver (Free) - 解壓縮工具 Disk Inventory X (Free) - 硬碟分析，看看哪些東西佔走了你的硬碟 1Password ($49.99) - 紀錄密碼 Alfred 2 (£17) - 搜尋工具，可取代內建Spotligh Bartender 2 ($15) - 隱藏狀態列的icon iStat Menus ($18) - 狀態列系統狀態資訊 Yoink ($4.99) - 拖拉暫放區 CleanMyMac 3 ($39.95) - Mac清理工具 MacClean (Free) - Mac清理工具 Rescue Time (Free) - 記錄自己在電腦上做什麼 CheatSheet (Free) - 熱鍵顯示工具 Karabiner (Free) - 修改鍵盤功能 Xee 3 ($3.99) - 看圖工具 5KPlayer (Free) - 影音播放 (已在10/14移除，因為快轉時會lag...) No Sleep (Free) - 防止電腦闔上時進入休眠狀態 iTerm (Free) - 終端機工具 ForkLift 2 ($29.95) - FTP, SFTP, Amazon S3 Client Sketch ($99) - 向量繪圖軟體 Affinity Photo ($49.99) - 點陣圖繪圖軟體","tags":"Post","title":"我的Mac使用軟體紀錄"},{"url":"https://mics.tw/posts/2015/10/fast-deploy-laravel-to-heroku/","text":"環境需求 PHP Composer Heroku toolbelt Windows使用者前兩個可以參考我的前一篇文章 Laravel 開發環境 on Windows7 ，不過本篇是以Unix like系統為角度撰寫，Windows使用者可能需要自行變通 登入並在heroku創建專案 $ heroku login Enter your Heroku credentials. Email: yout@email.address Password ( typing will be hidden ) : $ heroku create Creating mighty-scrubland-5244... done , stack is cedar-14 https://mighty-scrubland-5244.herokuapp.com/ | https://git.heroku.com/mighty-scrubland-5244.gi 把專案名稱記下來，在這裡是 mighty-scrubland-5244 ， 後面請都將此字串取代為你自己的專案名稱 。 在本機使用composer創造一個新專案 $ composer create-project laravel/laravel laravel-heroku # 進入Project資料夾 $ cd laravel-heroku 增加Procfile $ echo web: vendor/bin/heroku-php-apache2 public > Procfile # 此檔案用意是告訴http server我們的根目錄是public Windows下可以直接把以下內容複製到Procfile裡面 web : vendor /bin/ heroku - php - apache2 public 初始化git $ git init $ git add . $ git commit -am \"init\" # 增加remote端 $ heroku git:remote -a mighty-scrubland-5244 # 設定此app為php app $ heroku buildpacks:set https://github.com/heroku/heroku-buildpack-php # 把本地端的master推送到heroku $ git push heroku master 然後到 http://mighty-scrubland-5244.herokuapp.com 觀看 (請記得改成你自己得專案名稱) 你會看到 Whoops, looks like something went wrong. 會出現的原因是環境參數沒有設定 # 觀看環境參數 $ cat .env APP_ENV = local APP_DEBUG = true APP_KEY = ZMz9G6vGDWHT1HZAA9GNUZCsiYlAYCw9 DB_HOST = localhost DB_DATABASE = homestead DB_USERNAME = homestead DB_PASSWORD = secret CACHE_DRIVER = file SESSION_DRIVER = file QUEUE_DRIVER = sync MAIL_DRIVER = smtp MAIL_HOST = mailtrap.io MAIL_PORT = 2525 MAIL_USERNAME = null MAIL_PASSWORD = null MAIL_ENCRYPTION = null # 設定參數 請記得把ZMz9G6.....改成自己的 $ heroku config:set APP_KEY = ZMz9G6vGDWHT1HZAA9GNUZCsiYlAYCw9 Setting config vars and restarting mighty-scrubland-5244... done , v6 APP_KEY: ZMz9G6vGDWHT1HZAA9GNUZCsiYlAYCw9 # 其他的DATABASE USERNAME也可以以同樣方法設定 這裏沒有用到就不設定了 最後再到同一個網址按下F5 就可以看到Laravel 5了~","tags":"Post","title":"快速部署laravel到heroku"},{"url":"https://mics.tw/posts/2015/09/test-photo/","text":"本篇文章單純只有測試在文章中貼上圖片，不用其他會有其他內容。 千島湖 加拿大","tags":"Post","title":"測試圖片"},{"url":"https://mics.tw/posts/2015/09/change-to-pelican/","text":"已經很久沒寫部落格了，但是看到山姆鍋的文章 程式人就該有個部落格 就覺得應該要來寫一下文章。加上最近有需要寫一些教學給別人看，所以又重新開啟了。 然後加上我比較慣用Python，所以改用Pelican來當作部落格使用。 在這邊紀錄一下用了什麼東西 Pelican pelican-bootstrap3","tags":"Post","title":"改用Pelican來做部落格"},{"url":"https://mics.tw/posts/2014/05/laravel-development-environment-on-windows7/","text":"Laravel是一個最近很熱門的一個php framework，有鑑於有同學想學可是環境都是windows，有一些環境建立的障礙，所以就想說寫一篇Laravel環境建立的教學，讓windows下的使用者也可以快樂開發Laravel :D。 大家常用的Appserv的stable版本的php太舊了，無法直接使用composer，但是開發Laravel不用composer跟跛腳沒什麼兩樣阿...所以本篇文章以最新的php版本為主，但不使用apache2 之類的的http server，而是使用php內建的開發用server，至於MySQL不在本篇教學範圍內 :P。 下載php http://windows.php.net/download/ 選擇適合自己的版本 VC11 x64 Thread Safe (for 64位元作業系統) VC11 x86 Thread Safe (for 32位元作業系統) 解壓縮到C:\\php 增加php到PATH內 PATH C:\\php 啟用php擴充套件 (安裝composer必須) 用純文字編輯程式打開C:\\php\\php.ini (如果沒有就從php.ini-development 複製一個) 找到 ;extension=php_openssl.dll 將前面的分號去掉後存檔 然後把 C:\\php\\ext\\php_openssl.dll 複製到 C:\\php\\php_openssl.dll 安裝composer 開啟cmd 下達以下指令 C:\\Users\\username>C: C:\\Users\\username>cd \\php C:\\php>php -r \"readfile('https://getcomposer.org/installer');\" | php C:\\php>echo @php \"%~dp0composer.phar\" %*>composer.bat 測試composer 開啟cmd然後下達以下指令 C:\\Users\\username>composer -V 如果看到(後面那一大串亂亂的可能會不同) Composer version 3677c1ea6905b71daf8c3c4af716d2fe2d6f85bd 2014-05-03 07:46:50 代表安裝成功 :D 以下為未出篇章 改天再來寫 Part II - 使用composer與安裝laravel Part III - laravel Quickstart 參考文件 http://laravel.com/docs/quick https://getcomposer.org/doc/00-intro.md","tags":"Post","title":"Laravel 開發環境 on Windows7 - part I - 安裝Composer"},{"url":"https://mics.tw/posts/2014/01/kuas-system-correction/","text":"本文已經過期，這裏有一個 學弟做的版本 最近把作業系統換成linux，完全把windows移除了，但是..但是..但是...我們學校的校務系統居然是IE Only.....哪年代的東西了阿，也該改一下了吧.......... 因為我沒有IE所以我只好來研究有沒有什麼解決辦法，和爛的要死(一堆非標準寫法)的HTML奮戰兩小時後，把我有用到的功能修正了，我是用Greasemonkey的使用者腳本來達成修正的。 注意 我只有修正我用到的功能，如果有任何其他功能不完善的地方請勿見怪...也歡迎回報我會試著解決 以下是使用教學 首先安裝Firefox plugin Greasemonkey (好像chrome也有??，我只有在firefox上測試而已) https://addons.mozilla.org/zh-tw/firefox/addon/greasemonkey/ 到 我的github 上點 然後就會出現 點選安裝，恭喜你可以正常進入校務系統了............","tags":"Post","title":"高應大校務系統修正"},{"url":"https://mics.tw/posts/2014/01/optimization-of-ubuntu/","text":"一直以來我都沒有什麼注意字體的部份，只要看的順眼，沒有鋸齒狀（上一篇文章 Netbeans on Ubuntu字體優化 就是因為有了鋸齒所以我想要改進)，就可以接受了，但是今天在Facebook上看到了同學轉發了一篇文章( 小心！GB 18030 就在你身邊 )，突然驚覺我在使用的字體居然有這麼多簡體中文的成份存在，我向來是不寫簡體字的，雖然看得懂，但是書寫時仍然以繁體為主，今天看到這篇文章之後我立刻查看了Ubuntu預設的繁體中文字體，居然是簡體的格式，今天就要來把這問題修正。 ß 我找到的字體是教育部的標準字體--教育部宋體字形檔(Unicode碼)( 教育部資料下載頁面 )，下載方式參考下圖 安裝方法 注意!! 後來發現用教育部宋體字太細了，閱讀起來眼睛其實蠻不舒服的，最後還是為了保護眼睛妥協於droid了，如果各位有找到任何耐看的符合台灣標準的字體歡迎推薦給我!!!! 下載之後把檔案放在以下目錄 ./fonts/ 或是放到系統資料夾 /usr/share/fonts/ 兩者選一個就可以了，前者是使用者自己的，後者是整個系統的。不過後面還是要修改系統檔案，還是建議以系統為主。然後修改字體優先順序檔案。 sudo vim /etc/fonts/conf.d/69-language-selector-zh-tw.conf 找到類似 <edit name= \"family\" mode= \"prepend\" binding= \"strong\" > <string> AR PL New Sung </string> <string> AR PL UMing TW </string> <string> AR PL UMing HK </string> <string> HYSong </string> 這樣的東西，應該會有三個，然後將教育部宋體字型檔的英文名稱「MOESongUN Regular」放到第一個，然後將「AR PL New Sung」放到第二個， 三個 都要做這樣的設定 之所以要把「AR PL New Sung」放到第二個是因為教育部的字體並沒有簡體中文，為了讓簡體文章不會看起來很詭異所以把類似的有簡體字的字體放在第二順位，才不會造成字體詭異的狀況(參考下圖) 最後附上一張教育部宋體字形檔的圖片","tags":"Post","title":"Ubuntu字體優化 - 去除GB 18030"},{"url":"https://mics.tw/posts/2014/01/eye-protection-redshift/","text":"今天回老家的時候，我跟跟我推薦了一個保護眼睛的軟體，叫做 f.lux ，不過他用在ubuntu會有一些莫名其妙的小問題，我也解決不了只好找替代軟體了，上網搜尋了一下找到 Redshift 這套軟體，於是就把他裝上去了。 詳細安裝方法請繼續閱讀 因為Ubuntu 13.10套件庫內已經有了，所以直接安裝即可 sudo apt-get install gtk-redshift redshift python-appindicator gtk-redshift 以上為安裝和執行 如果要自訂設定請下以下指令 vim ~/.config/redshift.conf (如果有其他編輯器請把vim替換 ex.gedit nano) 貼上 ```ini redshift.conf ; Global settings for redshift [redshift] ; Set the day and night screen temperatures temp-day=5700 temp-night=3500 ; Enable/Disable a smooth transition between day and night ; 0 will cause a direct change from day to night screen temperature. ; 1 will gradually increase or decrease the screen temperature transition=1 ; Set the screen brightness. Default is 1.0 ;brightness=0.9 ; It is also possible to use different settings for day and night since version 1.8. ;brightness-day=0.7 ;brightness-night=0.4 ; Set the screen gamma (for all colors, or each color channel individually) gamma=0.8 ;gamma=0.8:0.7:0.8 ; Set the location-provider: 'geoclue', 'gnome-clock', 'manual' ; type 'redshift -l list' to see possible values ; The location provider settings are in a different section. location-provider=manual ; Set the adjustment-method: 'randr', 'vidmode' ; type 'redshift -m list' to see all possible values ; 'randr' is the preferred method, 'vidmode' is an older API ; but works in some cases when 'randr' does not. ; The adjustment method settings are in a different section. adjustment-method=randr ; Configuration of the location-provider: ; type 'redshift -l PROVIDER:help' to see the settings ; ex: 'redshift -l manual:help' [manual] lat=23.50 lon=121.00 ;hawaii :D ; lat=21.28 ; lon=157.81 這是我的設定檔，給大家參考參考 如果想要自動執行 vim ~/ . config / autostart / redshift . desktop 貼上 ``` desktop redshift . desktop [ Desktop Entry ] Type = Application Exec =/ usr / bin / gtk - redshift Icon = Hidden = false NoDisplay = false X - GNOME - Autostart - enabled = true Name = GTK - Redshift GenericName = gtk - redshift X - GNOME - FullName = Redshift Comment = good redshift : D","tags":"Post","title":"保護眼睛? Redshift"},{"url":"https://mics.tw/posts/2013/12/html-box-sizing/","text":"以前在寫網頁CSS的時候下面這三個加起來，會等於你的總寬度 border padding width 但是大家覺得數學並不好玩，所以到了新世代，應該要有新方法，以下這個方法適用於IE8以上 * { -webkit- box-sizing : border-box ; /* Safari/Chrome, other WebKit */ -moz- box-sizing : border-box ; /* Firefox, other Gecko */ box-sizing : border-box ; /* Opera/IE 8+ */ } 這個方法呢，會讓 內容+padding+border = 設定寬度 ，多美好阿:D 參考資料 http://zh.learnlayout.com/box-sizing.html","tags":"Post","title":"html box sizing"},{"url":"https://mics.tw/posts/2013/12/ubuntu-fonts-optimization/","text":"最近在公司開發php的專案，使用Netbeans來作開發，但是在Ubuntu上字體有夠詭異的，所以就開始上網找解決方案了。 教學: 在Netbean中的設定檔 ./netbeans-7.x/etc/netbeans.conf 裡面找到 netbeans_default_options=\"-J-xxxx -J-xxxx\" 然後在這段的最後雙引號(\")前 加上 -J-Dswing.aatext=true -J-Dawt.useSystemAAFontSettings=lcd 看起來會像這樣 netbeans_default_options=\"-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J -Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-D sun.java2d.noddraw=true -J-Dsun.java2d.dpiaware=true -J-Dsun.zip.disableMemo ryMapping=true -J-Dswing.aatext=true -J-Dawt.useSystemAAFontSettings=lcd\" 教學文章 然後參考以下安裝font Rendering 和 openJDK patch 就完成了!! Better Font Rendering In Linux With Infinality Install OpenJDK Patched With Font Fixes (ubuntu ppa) PPA 如果懂ppa可以直接安裝XD ppa:no1wantdthisname/ppa ppa:no1wantdthisname/openjdk-fontfix 程式設計師用等寬字型 https://github.com/adobe/source-code-pro http://openfontlibrary.org/font/consolamono 找了這麼久，結果最後用文泉驛等寬微米黑，因為Netbeans需要字體內有中文才能顯示中文 :/ 參考資料 NetBeans IDE 字型美化 on Ubuntu Linux","tags":"Post","title":"Netbeans On Ubuntu字體優化"},{"url":"https://mics.tw/posts/2013/12/first-use-octopress/","text":"第一次使用octopress :D 用git的方式和markdown來撰寫blog 可以用vim來寫blog 好特別XDDD Reference http://markdown.tw/ - markdown語法教學 http://octopress.org/docs/setup/ - octopress初始化教學 http://octopress.org/docs/deploying/github/ - octopress on github教學","tags":"Post","title":"第一次使用Octopress"}]}